/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDeckArgs } from "./CreateDeckArgs";
import { UpdateDeckArgs } from "./UpdateDeckArgs";
import { DeleteDeckArgs } from "./DeleteDeckArgs";
import { DeckFindManyArgs } from "./DeckFindManyArgs";
import { DeckFindUniqueArgs } from "./DeckFindUniqueArgs";
import { Deck } from "./Deck";
import { CardFindManyArgs } from "../../card/base/CardFindManyArgs";
import { Card } from "../../card/base/Card";
import { DeckService } from "../deck.service";

@graphql.Resolver(() => Deck)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DeckResolverBase {
  constructor(
    protected readonly service: DeckService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "read",
    possession: "any",
  })
  async _decksMeta(
    @graphql.Args() args: DeckFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Deck])
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "read",
    possession: "any",
  })
  async decks(@graphql.Args() args: DeckFindManyArgs): Promise<Deck[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Deck, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "read",
    possession: "own",
  })
  async deck(@graphql.Args() args: DeckFindUniqueArgs): Promise<Deck | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Deck)
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "create",
    possession: "any",
  })
  async createDeck(@graphql.Args() args: CreateDeckArgs): Promise<Deck> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Deck)
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "update",
    possession: "any",
  })
  async updateDeck(@graphql.Args() args: UpdateDeckArgs): Promise<Deck | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Deck)
  @nestAccessControl.UseRoles({
    resource: "Deck",
    action: "delete",
    possession: "any",
  })
  async deleteDeck(@graphql.Args() args: DeleteDeckArgs): Promise<Deck | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Card])
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "read",
    possession: "any",
  })
  async cards(
    @graphql.Parent() parent: Deck,
    @graphql.Args() args: CardFindManyArgs
  ): Promise<Card[]> {
    const results = await this.service.findCards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
